generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  username  String?   @db.VarChar(40)
  email     String    @unique
  password  String?
  role      String?
  status    String?
  isAdmin   Boolean   @default(false)
  // Relations
  profile   Profile[]
  orders    Order[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Profile {
  id            String   @id @default(cuid())
  imageUrl      String?
  phoneNumber   String?
  streetAddress String?
  city          String?
  postalCode    String?
  country       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String   @unique
  User          User?    @relation(fields: [userId], references: [id])
}

model Products {
  id          String @id @default(cuid())
  title       String @db.VarChar(200)
  description String
  price       Int    @default(0)
  discount    Float  @default(0)
  status      String @default("Pending")
  quantity    Float  @default(0)

  categoryId String
  modelId    String

  // Relations
  category Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  model    Model     @relation(fields: [modelId], references: [id], onDelete: Cascade)
  images   Image[]
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Products Products[]
}

model Model {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Products Products[]
}

// model Order {
//   id              String   @id @default(cuid())
//   customerName    String
//   customerEmail   String
//   shippingAddress String
//   createdAt       DateTime @default(now())
//   updated         DateTime @updatedAt
//   User            User     @relation(fields: [userId], references: [id])
//   userId          String
// }

model Order {
  id              String   @id @default(cuid())
  orderNumber     String   @unique
  userId          String?
  customerName    String
  customerEmail   String
  status          String   @default("Pending") // Pending, Processing, Shipped, Delivered, Cancelled
  subtotal        Float
  tax             Float?
  shipping        Float?
  total           Float
  shippingAddress String?
  paymentMethod   String   @default("Cash on Delivery")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user  User?       @relation(fields: [userId], references: [id])
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  productId   String
  title       String
  description String?
  price       Float
  quantity    Int
  discount    Float    @default(0)
  image       String?
  category    String
  model       String
  subtotal    Float
  createdAt   DateTime @default(now())

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Image {
  id        String   @id @default(cuid())
  imageUrl  String
  Products  Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Comment {
  id        String    @id @default(cuid())
  text      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  Products  Products? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?
}
